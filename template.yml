AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  laji_project

  Sample SAM Template for laji_project

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Metadata:
  cfn-lint:
    config:
      regions:
        - us-east-1
        - us-east-2
      ignore_checks:
        - E3030
Parameters:
  Env:
    Type: String
    Description: The name of the deployment stage(e.g dev, test, prod)
    Default: Prod

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    VpcConfig:
      SecurityGroupIds:
        - sg-0d494c6ad1b4d3743
      SubnetIds:
        - subnet-06ef0b0a08ad250be
        - subnet-01669cf8673622f57
  Api:
    TracingEnabled: True

Resources:
  PolingestionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: policy_ingestion/
      Handler: app.lambda_handler
      Runtime: python3.10
      ReservedConcurrentExecutions: 100
      DeadLetterQueue:
        Type : SQS
        TargetArn: !Ref FunctionQueueDLQ
      VpcConfig:
        SecurityGroupIds:
          - sg-0d494c6ad1b4d3743
        SubnetIds:
          - subnet-061ca37a9cf59a4f0
          - subnet-0fd5edd109b239b8f
      Architectures:
        - arm64
      Events:
        PolicyRequest:
          Type: Api
          Properties:
            Path: /api/v1/policy/create
            Method: POST
            RestApiId: !Ref PolicyIngestionAPI
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt EventBus.Arn


  PolicyIngestionAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      TracingEnabled: True
      CacheClusterEnabled: True
      EndpointConfiguration:
        Type: REGIONAL

  APIKeyPolicyIngestionService:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - PolicyIngestionAPI
    Properties:
      Description: "Key to make API call to policy ingestion engine"
      Enabled: True
      Name: !Sub "APIKeyPolicyIngestionService-${AWS::StackName}"

  PolicyIngestionAPIKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - APIKeyPolicyIngestionService
    Properties:
      ApiStages:
        - ApiId: !Ref PolicyIngestionAPI
          Stage: !Ref PolicyIngestionAPIStage
      Description: "Usage plan to make API call to Ingestion Engine"
      Quota:
        Limit: 10000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 100


  PolicyIngestionUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref APIKeyPolicyIngestionService
      KeyType: API_KEY
      UsagePlanId: !Ref PolicyIngestionAPIKeyUsagePlan
 

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsight-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
        Query:
          StackIdentifier: !Ref AWS::StackId
  
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Sub "ApplicationInsight-SAM-${AWS::StackName}"
      AutoConfigurationEnabled: true
    DependsOn: ApplicationResourceGroup
  
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "PolicyEventBus-${AWS::StackName}"
  
  LifeInsuranceRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "LifeInsuranceRule-${AWS::StackName}"
      Description: "Rule to route life insurance policy data"
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - laji_project.policydata
        detail:
          policyType:
            - life insurance
      Targets:
        - Arn: !GetAtt LifeInsuranceQueue.Arn
          Id: LifeInsuranceRuleTarget
          RetryPolicy:
            MaximumRetryAttempts: 4
            MaximumEventAgeInSeconds: 400
          DeadLetterConfig:
            Arn: !GetAtt LifeInsuranceDLQ.Arn
      State: ENABLED
  
  AutoInsuranceRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "AutoInsuranceRule-${AWS::StackName}"
      Description: "Rule to route auto insurance policy data"
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - "laji_project.policydata"
        detail:
          policyType:
            - "auto insurance"
      Targets:
        - Arn: !GetAtt AutoInsuranceQueue.Arn
          Id: AutoInsuranceRuleTarget
          RetryPolicy:
            MaximumRetryAttempts: 4
            MaximumEventAgeInSeconds: 400
          DeadLetterConfig:
            Arn: !GetAtt AutoInsuranceQueueDLQ.Arn
      State: ENABLED
  
  InsuranceKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: My KMS key
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'

  LifeInsuranceQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub "LifeInsuranceQueue-${AWS::StackName}"
      KmsMasterKeyId: !GetAtt InsuranceKMSKey.Arn

  LifeInsuranceDLQ:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub "LifeInsuranceQueueDLQ-${AWS::StackName}"
      KmsMasterKeyId: !GetAtt InsuranceKMSKey.Arn

  AutoInsuranceQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub "AutoInsuranceQueue--${AWS::StackName}"
      KmsMasterKeyId: !GetAtt InsuranceKMSKey.Arn

  AutoInsuranceQueueDLQ:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub "AutoInsuranceQueueDLQ-${AWS::StackName}"
      KmsMasterKeyId: !GetAtt InsuranceKMSKey.Arn
  
  FunctionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "FunctionQueueDLQ-${AWS::StackName}"
      KmsMasterKeyId: !GetAtt InsuranceKMSKey.Arn

  FunctionQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "FunctionQueueDLQ-${AWS::StackName}"
      KmsMasterKeyId: !GetAtt InsuranceKMSKey.Arn
  
  LifeFunctionQueueDLQPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LifeInsuranceLoadFunction
      Action: "sqs:SendMessage"
      Principal: "sqs.amazonaws.com"
      SourceArn: !GetAtt LifeFunctionEventSourceMapping.Arn
    
  AutoFunctionQueueDLQPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AutoInsuranceLoadFunction
      Action: "sqs:SendMessage"
      Principal: "sqs.amazonaws.com"
      SourceArn: !GetAtt AutoFunctionEventSourceMapping.Arn
    
  LifeFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: <ARN of the event source>
      FunctionName: !GetAtt LifeInsuranceLoadFunction.Arn
      StartingPosition: LATEST

  AutoFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: <ARN of the event source>
      FunctionName: !GetAtt AutoInsuranceLoadFunction.Arn
      StartingPosition: LATEST
  
  LifeInsuranceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: PolicyId
        Version: '2012-10-17'
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
            Resource: !GetAtt LifeInsuranceQueue.Arn
      Queues:
        - !Ref LifeInsuranceQueue
  
  AutoInsuranceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt AutoInsuranceQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref EventBus
      Queues:
        - !Ref AutoInsuranceQueue
  
  LifeInsuranceDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: policyId
          AttributeType: S
      KeySchema:
        - AttributeName: policyId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "LifeInsuranceDynamoTable-${AWS::StackName}"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !GetAtt InsuranceKMSKey.Arn
  
  AutoInsuranceDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: policyId
          AttributeType: S
      KeySchema:
        - AttributeName: policyId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "AutoInsuranceDynamoTable-${AWS::StackName}"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !GetAtt InsuranceKMSKey.Arn

  LifeInsuranceLoadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: life_insurance_load/
      Handler: app.lambda_handler
      Runtime: python3.10
      ReservedConcurrentExecutions: 100
      Architectures:
        - arm64
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref LifeInsuranceDynamoTable
          MY_ENCRYPTED_VARIABLE: !Sub "{{resolve:ssm:/my-encrypted-variable:kmsKeyId}}/{{resolve:ssm:/my-encrypted-variable:version}}}"
          SQS_QUEUE: !Ref LifeInsuranceQueue
      DeadLetterQueue:
        Type : SQS
        TargetArn: !Ref FunctionQueueDLQ
      Policies:
        - SQSPollerPolicy:
            QueueName: !Ref LifeInsuranceQueue

  LifeLambdaKMSKeyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'kms:Decrypt'
      FunctionName: !Ref LifeInsuranceLoadFunction
      Principal: lambda.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt InsuranceKMSKey.Arn
  
  AutoInsuranceLoadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auto_insurance_load/
      Handler: app.lambda_handler
      Runtime: python3.10
      ReservedConcurrentExecutions: 100
      Architectures:
        - arm64
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref AutoInsuranceDynamoTable
          SQS_QUEUE: !Ref AutoInsuranceQueue
          MY_ENCRYPTED_VARIABLE: !Sub "{{resolve:ssm:/my-encrypted-variable:kmsKeyId}}/{{resolve:ssm:/my-encrypted-variable:version}}}"
      DeadLetterQueue:
        Type : SQS
        TargetArn: !Ref FunctionQueueDLQ
      Policies:
        - SQSPollerPolicy:
            QueueName: !Ref AutoInsuranceQueue

  AutoLambdaKMSKeyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'kms:Decrypt'
      FunctionName: !Ref AutoInsuranceLoadFunction
      Principal: lambda.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt InsuranceKMSKey.Arn
  
Outputs:
  PolicyApi:
    Description: API Gateway endpoint URL for Prod stage for Policy Ingestion function
    Value: !Sub "https://${PolicyIngestionAPI}.execute-api.${AWS::Region}.amazonaws.com/${Env}/api/v1/policy/new"
  PolingestionFunction:
    Description: Policy Ingestion Lambda Function ARN
    Value: !GetAtt PolingestionFunction.Arn
  PolingestionFunctionIamRole:
    Description: Implicit IAM Role created for Policy Ingestion function
    Value: !GetAtt PolingestionFunctionRole.Arn
  LifeInsuranceQueue:
    Description: SQS Queue URL for Life Insurance
    Value: !GetAtt LifeInsuranceQueue.Arn
  AutoInsuranceQueue:
    Description: SQS Queue URL for Auto Insurance
    Value: !GetAtt AutoInsuranceQueue.Arn
  LifeInsuranceDynamoTable:
    Description: DynamoDB Table Name for Life Insurance
    Value: !Ref LifeInsuranceDynamoTable
  AutoInsuranceDynamoTable:
    Description: DynamoDB Table Name for Auto Insurance
    Value: !Ref AutoInsuranceDynamoTable
  LifeInsuranceLoadFunction:
    Description: Lambda function to load life insurance events to DynamoDB table
    Value: !GetAtt LifeInsuranceLoadFunction.Arn
  AutoInsuranceLoadFunction:
    Description: Lambda function to load auto insurance events to DynamoDB table
    Value: !GetAtt AutoInsuranceLoadFunction.Arn   

